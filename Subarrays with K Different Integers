class Solution {
private:
    // Function to find the length of the longest subarray with at most k distinct elements
    int longestSubarrayAtmostKFreq(vector<int>& nums, int k) {
        int n = nums.size();
        unordered_map<int, int> freq; // Map to store frequency of elements
        int left = 0, right = 0; // Pointers for the sliding window
        int distinct = 0; // Number of distinct elements in the current window
        int maxLength = 0; // Maximum length of subarray with at most k distinct elements

        while (right < n) {
            // Increase frequency of the current element
            if (freq[nums[right]] == 0)
                distinct++; // Increment distinct count if encountering a new element
            freq[nums[right]]++; // Increment frequency of the current element

            // If number of distinct elements exceeds k, move the left pointer
            while (distinct > k) {
                freq[nums[left]]--; // Decrease frequency of the element at left pointer
                if (freq[nums[left]] == 0)
                    distinct--; // If frequency becomes 0, decrement distinct count
                left++; // Move left pointer forward
            }

            // Update maxLength by considering the length of current subarray
            maxLength += right - left + 1;

            right++; // Move right pointer forward
        }

        return maxLength; // Return the length of the longest subarray
    }

public:
    // Function to find number of subarrays with exactly k distinct elements
    int subarraysWithKDistinct(vector<int>& nums, int k) {
        // Number of subarrays with at most k distinct elements
        int result1 = longestSubarrayAtmostKFreq(nums, k);
        // Number of subarrays with at most (k-1) distinct elements
        int result2 = longestSubarrayAtmostKFreq(nums, k - 1);
        // Number of subarrays with exactly k distinct elements
        return result1 - result2;
    }
};

TC : O(N)
SC : O(N)
