class Solution {
public:
    int maxProductDifference(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin() , nums.end());
        return nums[n-1] * nums[n-2] - nums[1]*nums[0];
    }
};  //O(nlogn)TC  O(1)SC

class Solution {
public:
    int maxProductDifference(vector<int>& nums) {
        int size = nums.size();
        int biggest = 0 , secondBiggest = 0 , smallest = INT_MAX , secondSmallest = INT_MAX;

        for(int i = 0 ; i < size ; i++){
            if(nums[i] > biggest){
                secondBiggest = biggest;
                biggest = nums[i]; 
            }
            else if(nums[i] > secondBiggest){
                secondBiggest = nums[i];
            }

            if(nums[i] < smallest){
                secondSmallest = smallest;
                smallest = nums[i];
            }
            else if(nums[i] < secondSmallest){
                secondSmallest = nums[i];
            }
        }
        return biggest * secondBiggest - smallest * secondSmallest;
    }
};  O(N)TC   O(1) SC
