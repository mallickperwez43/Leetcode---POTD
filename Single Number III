/* Method 1 : map
Take a map and store freq of elements
1 2 1 3 2 5
// Traversal time -> O(n)
// space -> O(n) for map
1 -> 2
2 -> 2
3 -> 1
5 -> 1
// Traverse the map and get the elements whos freq is 1 (time -> O(n))
{3, 5} -> ans

// Overall
TC : O(n)
SC : O(n)
*/

// Method 2 : Bit masking and xor property
class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        int res = 0;
        // getting the xor of the whole array
        for(int i = 0; i < nums.size(); i++){
            res = res ^ nums[i];
        }

        // make the mask 
        unsigned int mask = res & -(unsigned int)res;
         
        int first = 0;
        // get the first unique element from the array res with the help of mask
        for(int i = 0; i < nums.size(); i++){
            // getting all the elements whos bit is sert as that of mask 
            if(mask & nums[i]){
                // reduced the problem to single unique element in an array
                first = first ^ nums[i];
            }
        } 

        // second element is xor of res and first
        int second = res ^ first;

        return {first, second};
    }
};

// TC : O(n)
// SC : O(1)
