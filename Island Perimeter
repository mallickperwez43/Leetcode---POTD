// method 1 -> iterative method 

class Solution {
public:
    // Up, Down, Left, Right
    vector<int> dx = {-1, 1, 0, 0};
    vector<int> dy = {0, 0, 1, -1};
    int islandPerimeter(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size(), perimeter = 0;
        
        // iterate the grid
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                // land found
                if(grid[i][j] == 1){
                    // check neighbours
                    for(int k = 0; k < 4; k++){
                        // now if your are in bound 
                        if((i + dx[k] >= 0) and (i + dx[k] < n) and (j + dy[k] >= 0) and (j + dy[k] < m)){
                            // surrounding is water
                            if(grid[i + dx[k]][j + dy[k]] == 0) perimeter++;
                        }
                        // if you are at the boundary
                        else if(i == 0 or i == n - 1 or j == 0 or j == m - 1){
                            perimeter++;
                        }
                    }
                }
            }
        }
        return perimeter;
    }
};

TC : O(n * m)
SC : O(1)

// method 2 -> dfs

class Solution {
private:
    int dfs(vector<vector<int>>& grid, int r, int c){
        // base case -> out of bound or grid element is water
        if(r < 0 or r >= grid.size() or c < 0 or c >= grid[0].size() or grid[r][c] == 0){
            return 1;    // water contributes 1 to the perimeter
        }
        // base case 2  -> already visisted
        if(grid[r][c] == -1){
            return 0;
        }

        // mark the cell as visited
        grid[r][c] = -1;

        // explore neighbourhood (Up, Down ,Left , Right)
        return (dfs(grid, r - 1, c) +
                dfs(grid, r + 1, c) +
                dfs(grid, r, c + 1) +
                dfs(grid, r, c - 1));
    }
public:
    int islandPerimeter(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size(), perimeter = 0;
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(grid[i][j] == 1){
                    perimeter += dfs(grid, i, j);
                }
            }
        }
        return perimeter;
    }
};

TC : O(n * m)
SC : O(n * m)
