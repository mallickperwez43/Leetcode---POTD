class Solution {
public:
    int numSubarrayProductLessThanK(vector<int>& nums, int k) {
        // If k is less than or equal to 1, no subarray can have a product less than k.
        // So, return 0.
        if(k <= 1){
            return 0;
        }

        int n = nums.size(); // Number of elements in the nums vector.

        int left = 0, product = 1, subArrCnt = 0;
        // Loop through each element in the nums vector.
        for(int right = 0; right < n; right++){
            // Calculate product of elements from left to right.
            product *= nums[right];
            // If the product is greater than or equal to k, shrink the window from the left
            // until the product becomes less than k.
            while(product >= k){
                product /= nums[left++];
            }
            // For each valid subarray, add the count of subarrays.
            subArrCnt += (right - left) + 1;
        }
        return subArrCnt; // Return the total count of subarrays.
    }
};
TC : O(n)
SC : O(1)
