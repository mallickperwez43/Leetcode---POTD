//dikstra ki tarah
// also see  this problem first : Cheapest Flights Within K Stops 

class Solution {
public:
    vector<int> findAllPeople(int n, vector<vector<int>>& meetings, int firstPerson) {
        vector<vector<pair<int,int>>> adj(n);
        for(auto meet : meetings){
            adj[meet[0]].push_back({meet[1], meet[2]});  //bidirectional meetings hai meet[2] time hai
            adj[meet[1]].push_back({meet[0], meet[2]}); 
        }

        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        //yaha time ke hissab se push karenge 
        pq.push({0, 0});
        pq.push({0, firstPerson});

        vector<int> vis(n, 0);

        while(!pq.empty()){
            auto it = pq.top();
            int curTime = it.first;
            int curPerson = it.second;
            pq.pop();

            if(vis[curPerson]){   //base ek baar jisko bata diya usko fhir aage fhir bata ke kya fayeda
                continue;
            }
            vis[curPerson] = true;

            for(auto next : adj[curPerson]){    
                //person ke adjecent me jitne hai sabko visit krdo
                //adj list person time se store haina 
                //next.first bata dega woh curPerson visited hai ya nhi
                //next.second bata dega agar uska meet time curTime se bada hai ya nhi
                //jab meet time bada hoga tabhi pata hoga ki usko secret batana hai 
                if(!vis[next.first] && next.second >= curTime){
                    pq.push({next.second, next.first});
                }
            }
        }
        
        //joh visited hoga usse hi toh secret pata hoga 
        vector<int> ans;
        for(int i = 0; i < n; i++){
            if(vis[i]){
                ans.push_back(i);
            }
        }

        return ans;
    }
};
