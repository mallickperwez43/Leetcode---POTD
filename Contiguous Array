class Solution {
public:
    int findMaxLength(vector<int>& nums) {
        int n = nums.size();
        
        // map to store the prefix sum with the indexes
        unordered_map<int, int> mp;
        
        // intialize sum and the length of the subarray as zero
        int sum = 0; 
        int subarrayLength = 0;

        // iterate every elements of the array
        for(int i = 0; i < n; i++){
            // if the elements is zero decrement the sum by 1
            // else if the element is one increment the sum by 1
            sum += nums[i] == 0 ? -1 : 1;
            
            // when sum is zero we found a possible length
            if(sum == 0){  
                subarrayLength = i + 1;
            }
            // if the sum is already present in the map 
            // then we maximize the length
            else if(mp.find(sum) != mp.end()){
                subarrayLength = max(subarrayLength, i - mp[sum]);
            }
            // we add the new sum in the map
            else{
                mp[sum] = i;
            }
        }
        return subarrayLength;  // returning the maximum length possible
    }
};

tc : O(n)
sc : O(n)
