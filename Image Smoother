class Solution {
public:
    vector<vector<int>> imageSmoother(vector<vector<int>>& img) {
        int n = img.size();
        int m = img[0].size();

        //possible direction of traversal
        int dx[] = {-1 , 1 ,  0  , 0 , -1 , -1 ,  1 , 1};
        int dy[] = { 0 , 0 , -1  , 1 , -1 ,  1 , -1 , 1};
        //         { U , D ,  L ,  R , UL ,  UR , DL , DR};

        auto isValid = [&](int x , int y) -> bool{
            if(x < 0 or x >= n or y < 0 or y >= m){
                return 0;
            }
            return 1;
        };
    
        vector<vector<int>> ans (n , vector<int> (m));

        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                int sum = img[i][j];
                int count = 1;

                //possible traversal
                for(int p = 0 ; p < 8 ; p++){
                    int nx = i + dx[p];
                    int ny = j + dy[p];
                    
                    //valid ones
                    if(isValid(nx,ny)){
                        sum += img[nx][ny];
                        count++;
                    }
                }
                ans[i][j] = floor(sum/count);
            }
        }
        return ans;
    };
};

// another way
class Solution {
public:
    vector<vector<int>> imageSmoother(vector<vector<int>>& img) {
        int n = img.size();
        int m = img[0].size();

        //possible direction of traversal
        int dx[] = {-1 , 1 ,  0  , 0 , -1 , -1 ,  1 , 1};
        int dy[] = { 0 , 0 , -1  , 1 , -1 ,  1 , -1 , 1};
        //         { U , D ,  L ,  R , UL ,  UR , DL , DR};

        vector<vector<int>> ans (n , vector<int> (m));

        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                int sum = img[i][j];
                int count = 1;

                //possible traversal
                for(int p = 0 ; p < 8 ; p++){
                    int nx = i + dx[p];
                    int ny = j + dy[p];
                    
                    //valid ones
                    if(nx >= 0 && nx < n && ny >= 0 && ny < m){
                        sum += img[nx][ny];
                        count++;
                    }
                }
                ans[i][j] = floor(sum/count);
            }
        }
        return ans;
    }
};
