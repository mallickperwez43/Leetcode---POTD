/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private:
    private:
    ListNode* getMid(ListNode* head){
        ListNode* slow = head;
        ListNode* fast = head -> next;
      
        while(fast != NULL and fast -> next != NULL){
            fast = fast -> next -> next;
            slow = slow -> next;
        }
        return slow;
    }
  
    ListNode* reverse(ListNode* head){
        ListNode* cur = head;
        ListNode* prev = NULL;
        ListNode* ahead = NULL;
      
        while(cur != NULL){
            ahead = cur -> next;
            cur -> next = prev;
            prev = cur;
            cur = ahead;
        }
        return prev;
    }
public:
    bool isPalindrome(ListNode* head) {
        if(head == NULL or head -> next == NULL){
            return true;
        }

        // step 1 -> find middle
        ListNode* middle = getMid(head);
        
        // step 2 -> reverse linked list after middle
        ListNode* temp = middle -> next;
        middle -> next = reverse(temp);
        
        // step 3 -> compare both halves
        ListNode* head1 = head;
        ListNode* head2 = middle -> next;
        
        while(head2 != NULL){
            if(head1 -> val != head2 -> val){
                return false;
            }
            head1 = head1 -> next;
            head2 = head2 -> next;
        }
        
        // step4 -> repeat step 2 (optional)
        temp =  middle -> next;
        middle -> next = reverse(temp);
        
        return true;
    }
};

TC :O(m + n)
SC : O(1)
