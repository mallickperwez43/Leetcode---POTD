// method 1

class Solution {
public:
    int tribonacci(int n) {
        // base case 
        if(n == 0)
            return 0;
        if(n == 1 or n == 2)
            return 1;

        int first = 0, second = 1, third = 1;
        int next;

        for(int i = 3; i <=n ; i++){
            next = first + second + third;
            first = second; 
            second = third;
            third = next;
        }

        return next;
    }
};

// method 2 -> dp

class Solution {
public:
    int tribonacci(int n) {
        // base case 
        if(n == 0)
            return 0;
        if(n == 1 or n == 2)
            return 1;

        vector<int> dp(n + 1, 0);
        
        dp[1] = dp[2] = 1;

        for(int i = 3; i <= n; i++){
            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];
        }
        return dp[n];
    }
};

TC : O(n)
SC : O(1)
