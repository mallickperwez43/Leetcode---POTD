/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeZeroSumSublists(ListNode* head) {
        // Check if the head is null (edge case)
        if(head == NULL)
            return 0;
        
        // Create a map to store prefix sums and corresponding nodes
        unordered_map<int , ListNode*> prefixSumToNode;

        // Create a dummy node to handle cases where sublist starts from the first node
        ListNode* dummy = new ListNode(0);
        dummy -> next = head;
        // Initialize the dummy node's prefix sum as 0
        prefixSumToNode[0] = dummy;
        
        int prefix_sum = 0;
        
        // Traverse the list
        while(head != NULL){
            prefix_sum += head -> val;   // Update prefix sum

             // Check if the current prefix sum is already encountered
            if(prefixSumToNode.find(prefix_sum) != prefixSumToNode.end()){
                // If yes, it means sublist from previous occurrence to current node has sum 0
                ListNode* start = prefixSumToNode[prefix_sum];
                int sum_now = prefix_sum;
                
                // Iterate from previous occurrence to current node
                while(start != NULL and start != head){
                    start = start -> next;
                    sum_now += start -> val;
                    if(start != head)
                        prefixSumToNode.erase(sum_now); // Remove prefix sums in between
                }

                // Adjust the next pointer of the node associated with the prefix sum to skip the sublist
                prefixSumToNode[prefix_sum] -> next = head -> next;
            }
            else{
                // If the prefix sum is not encountered, add it to the map along with the current node
                prefixSumToNode[prefix_sum] = head;
            }
            // Move to the next node
            head = head -> next;
        }
        // Return the modified linked list
        return dummy -> next;
    }
};
