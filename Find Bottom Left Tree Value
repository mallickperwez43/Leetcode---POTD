// dfs

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        int d = 0;
        int ans = root -> val;  //base case

        function<void(TreeNode *, int)> dfs = [&](TreeNode * node, int cd){
            if(!node)
               return;
            
            if(cd > d){  // new distance encountered is new node encountered
                d = cd;
                ans = node -> val;
            }
          
            // dfs on left and right
            dfs(node -> left, cd + 1);
            dfs(node -> right, cd + 1);
        };

        dfs(root, 0);

        return ans;
    }
};

// using queue

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        queue<TreeNode*> q;
        q.push(root);    //push root in queue
        int leftmostValue;  // the ans

        while(!q.empty()){
            TreeNode * node = q.front();
            q.pop();

            leftmostValue = node -> val;   // the value of the node in front
            
            // if right exist push it to queue first
            if(node -> right){  
                q.push(node -> right);
            }  

            //if left exists too then put left after right so it gets in queue front
            if(node -> left){
                q.push(node -> left);
            }
        }

        return leftmostValue;
    } 
};
