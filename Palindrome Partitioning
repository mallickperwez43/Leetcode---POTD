class Solution {
private:
    void dfs(int index, string &s, vector<string> & path, vector<vector<string>> &ans){
        // base case
        if(index == s.size()){
            ans.push_back(path);
            return;
        }

        for(int end = index; end < s.size(); end++){
            if(isPalindrome(s, index, end)){
                // add that substring to path
                path.push_back(s.substr(index, end - index + 1));
                // recursive call for end palindromic substring from end + 1
                dfs(end + 1, s, path, ans);
                // backtrack
                path.pop_back();
            }
        }
    }

    bool isPalindrome(string &s, int start, int end){
        while(start <= end){
            if(s[start] != s[end]){
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        
        // empty string so no ans possible
        if(s.empty()) return ans;

        vector<string> path;

        dfs(0, s, path, ans);

        return ans;
    }
};

// TC O(2 ^ n (n1 + n2)) // 2 ^ n -> generating subsets , n1 -> check palindrome, n2 -> make substring
// SC : O(n) -> recursive depth 
