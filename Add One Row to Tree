// BFS

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* addOneRow(TreeNode* root, int val, int depth) {
        // Edge case: if depth is 1, insert a new node as the new root
        if(depth == 1){
            TreeNode* newNode = new TreeNode(val);
            newNode -> left = root;
            return newNode;
        } 
        
        // Use a queue for level order traversal
        queue<TreeNode*> q;
        q.push(root);
        int count = 0;
        
        // Traverse the tree level by level
        while(!q.empty()){
            int n = q.size();
            count++;
            
            // Process nodes at the current level
            for(int i = 0; i < n; i++){
                TreeNode* cur = q.front();
                q.pop();
                
                // If not yet reached the depth to add nodes, enqueue child nodes
                if(count != depth - 1){
                    if(cur -> left)
                        q.push(cur -> left);
                    if(cur -> right)
                        q.push(cur -> right);
                }
                // If reached the depth to add nodes, insert new nodes as children
                else{
                    // Insert a new node with the given value as the left child
                    TreeNode* leftNode = new TreeNode(val);
                    leftNode -> left = cur -> left;
                    cur -> left = leftNode;
                    
                    // Insert a new node with the given value as the right child
                    TreeNode* rightNode = new TreeNode(val);
                    rightNode -> right = cur -> right;
                    cur -> right = rightNode;
                }
            }
        }
        // Return the modified root
        return root;
    }
}; 


// DFS

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    // Recursive function to add a new row at the specified depth
    TreeNode* add(TreeNode* root, int val, int depth, int curDepth){
        // Base case: if the root is NULL, return NULL
        if(root == NULL)
            return NULL;
        
        // If current depth is depth - 1, insert new nodes at this level
        if(curDepth == depth - 1){
            // Save the left and right subtrees
            TreeNode* leftTree = root -> left;
            TreeNode* rightTree = root -> right;

            // Insert new nodes with the given value
            root -> left = new TreeNode(val);
            root -> right = new TreeNode(val);

            // Connect the new nodes to the saved subtrees
            root -> left -> left = leftTree;
            root -> right -> right = rightTree;

            return root;
        }

        // Recursively traverse left and right subtrees
        root -> left = add(root -> left, val, depth, curDepth + 1);
        root -> right = add(root -> right, val, depth, curDepth + 1);

        return root;
    }
public:
    // Function to add a row with nodes having the value 'val' at the specified depth
    TreeNode* addOneRow(TreeNode* root, int val, int depth) {
        // Edge case: if depth is 1, insert a new root node
        if(depth == 1){
            TreeNode *newRoot = new TreeNode(val);
            newRoot -> left = root;
            return newRoot;
        }

        // Call the recursive function to add nodes at the specified depth
        return add(root, val, depth, 1);
    }
};

// TC : O(n)
// SC : O(n) 
// for both
