// Method 1 : custom split string

class Solution {
private:
    vector<int> splitString(string &s, char delimeter){
        vector<int> ans;
        int start = 0; // the starting index
        int end = s.find(delimeter, start); // find the index of the delimeter
        
        // until we have delimeter 
        while(end != string :: npos){  
            string temp = s.substr(start, end - start);  // find the sub string
            ans.push_back(stoi(temp));  // convert the string to int and push it to ans
            
            // new coordinates
            start = end + 1;  
            end = s.find(delimeter, start);
        }

        // for the last part of sub string 
        string temp = s.substr(start, end - start);
        ans.push_back(stoi(temp));
        return ans;
    }
public:
    int compareVersion(string version1, string version2) {
        vector<int> v1 = splitString(version1, '.');
        vector<int> v2 = splitString(version2, '.');

        int val1, val2; 

        for(int i = 0; i < max(v1.size(), v2.size()); i++){
            // check for every index value 
            // assign 0 if any of the vector size ends 
            val1 = i < v1.size() ? v1[i] : 0;
            val2 = i < v2.size() ? v2[i] : 0;

            if(val1 < val2) return -1;
            else if(val1 > val2) return 1;
        }

        return 0;
    }
};

// TC : O(n + m)
// SC : O(n + m)


// Method 2 : inbuilt split string

class Solution {
public:
    int compareVersion(string version1, string version2) {
        vector<int> v1 , v2;
         
        // inbuilt function
        istringstream iss1(version1), iss2(version2);
        string token;

        while(getline(iss1, token, '.')) v1.push_back(stoi(token));
        while(getline(iss2, token, '.')) v2.push_back(stoi(token));

        int val1, val2; 

        for(int i = 0; i < max(v1.size(), v2.size()); i++){
            // check for every index value 
            // assign 0 if any of the vector size ends 
            val1 = i < v1.size() ? v1[i] : 0;
            val2 = i < v2.size() ? v2[i] : 0;

            if(val1 < val2) return -1;
            else if(val1 > val2) return 1;
        }

        return 0;
    }
};

// TC : O(n + m)
// SC : O(n + m)


// Method 3 : one pass

// iterate until '.' is found and then check values

class Solution {
public:
    int compareVersion(string version1, string version2) {
        int n1 = version1.size(), n2 = version2.size();
        int i = 0, j = 0;
    
        while(i < n1 or j < n2){
            int val1 = 0, val2 = 0;
            while(i < n1 and version1[i] != '.'){
                val1 = val1 * 10 + (version1[i] - '0');
                i++;
            }
            i++;

            while(j < n2 and version2[j] != '.'){
                val2 = val2 * 10 + (version2[j] - '0');
                j++;
            }
            j++;

            if(val1 < val2) return -1;
            else if(val1 > val2) return 1;
        }
        return 0;
    }
};

// TC : O(max(n, m))
// SC : O(1)
