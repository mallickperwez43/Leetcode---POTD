/*
    INTUTION
        Either a parent can give to its child or a child can give to its parent
        so to that we need to traverse first to the leaf and get the amount of nodes
        that require the coins or should i pass on the excess coins
    
    APPROACH
        Base case -> root = null -> return 0(you dont need any coin)
        Here we basically needed to call the dfs first and store the left and right first 
        moves will only be whats in that left and right part 
        and what we actually require or we give is
         1] (cur -> val - 1) -> how much this coins needs for himself
         2] left + right -> how much his child needed

*/ 



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int moves = 0;

    int dfs(TreeNode *node){
        if(!node) return 0;
        int left_excess = dfs(node -> left);
        int right_excess = dfs(node -> right);
        moves += abs(left_excess) + abs(right_excess);
        return node -> val + left_excess + right_excess - 1;
    }

    int distributeCoins(TreeNode* root) {
        dfs(root);
        return moves;    
    }
};

// TC : O(n)
// SC : O(n)
