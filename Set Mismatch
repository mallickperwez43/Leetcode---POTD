// method 1  : map
class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        int n = nums.size();
        unordered_map<int, int> freq;
        
        for(int i = 1 ; i <= n; i++) freq[i]++;

        for(auto it : nums) freq[it]--;
        int duplicate = 0, missing = 0;

        for(auto a : freq){
            if(a.second == -1) duplicate = a.first;
            if(a.second == 1) missing = a.first;
        }

        return {duplicate, missing};
    }
};

// method 2 : vector
class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        int n = nums.size();
        vector<int> count(n + 1, 0);
        
        int duplicate = 0, missing = 0;
        for(int i = 0 ; i < n; i++){
            count[nums[i]]++;
        }

        for(int i = 1; i < count.size(); i++){
            if(count[i] == 2) duplicate = i;
            if(count[i] == 0) missing = i;
        }

        return {duplicate, missing};
    }
};
