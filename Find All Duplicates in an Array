// method 1 : sorting

class Solution {
public:
    vector<int> findDuplicates(vector<int>& v) {
        // Sorting the vector for easier duplicate detection
        sort(v.begin(), v.end());

        int n = v.size();
        vector<int> ans; // Vector to store duplicate elements

        // Loop through the sorted vector to find duplicates
        for (int i = 0; i < n - 1; i++) {
            // If current element is equal to the next element, it's a duplicate
            if (v[i] == v[i + 1]) {
                ans.push_back(v[i]); // Add duplicate to the result vector
                i++; // Move to the next unique element
            }
        }

        return ans; // Return the vector containing duplicates
    }
};

TC : O(n. logn)
SC : O(1) 

// method 2 : updating our array

class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        int n = nums.size(); // Get the size of the input vector
        vector<int> ans; // Vector to store duplicate elements

        // Iterate through the input vector
        for(int i = 0; i < n; i++) {
            // Check if the value at the index corresponding to the absolute value of the current element is negative
            if(nums[abs(nums[i]) - 1] < 0) {
                ans.push_back(abs(nums[i])); // If negative, it means the element has appeared before, so add it to the result vector
                continue; // Move to the next iteration
            }
            nums[abs(nums[i]) - 1] *= -1; // Mark the element as visited by making its corresponding index negative
        }

        return ans; // Return the vector containing duplicates
    }
};

TC : O(n)
SC : O(1)
