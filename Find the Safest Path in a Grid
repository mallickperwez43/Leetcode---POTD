// Method 1 -> Multisource BFS + Binary search

class Solution {
public:
    vector<int>rowDir = {-1, 1, 0, 0};
    vector<int>colDir = {0, 0, -1, 1};

    bool isValid(vector<vector<bool>> &visited, int i, int j){
        if(i < 0 or i == visited.size() or j < 0 or j == visited[0].size() or visited[i][j]){
            return false;
        }
        return true;
    }
    
    // to check the validity of that Safeness Factor Using BFS
    bool isSafe(vector<vector<int>> &distToTheif, int safeDist){
        int n = distToTheif.size();

        queue<pair<int, int>> q;
         
        // BASE CASE -> if the starting place distance is less can use this SF cant use this path
        if(distToTheif[0][0] < safeDist) return false;

        q.push({0, 0});

        vector<vector<bool>> visited(n, vector<bool>(n, false));
        visited[0][0] = true;

        while(!q.empty()){
            int curRow = q.front().first, curCol = q.front().second;
            q.pop();

            // check if reached destination
            if(curRow == n - 1 and curCol == n - 1) return true;

            for(int dirIdx = 0; dirIdx < 4; dirIdx++){
                int newRow = curRow + rowDir[dirIdx];
                int newCol = curCol + colDir[dirIdx];
                    
                if(isValid(visited, newRow, newCol)){
                    if(distToTheif[newRow][newCol] < safeDist) continue;
                    visited[newRow][newCol] = true;
                    q.push({newRow, newCol});
                }
            }
        }
        return false;
    }

    int maximumSafenessFactor(vector<vector<int>>& grid) {
        int n = grid.size();
        queue<pair<int, int>> q;
        vector<vector<bool>> visited(n, vector<bool>(n, false));
        vector<vector<int>> distToTheif(n, vector<int>(n, -1));

        // step 1 : push all thief positions to queue to precompute the distance 
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    visited[i][j] = true;
                    q.push({i, j});
                }
            }
        }
        
        int len = 0;
        // Multi-source BFS to calculate minimum distance to any thief
        while (!q.empty()){
            int size = q.size();
            while(size--){
                int curRow = q.front().first, curCol = q.front().second;
                q.pop();
                distToTheif[curRow][curCol] = len;

                for(int dirIdx = 0; dirIdx < 4; dirIdx++){
                    int newRow = curRow + rowDir[dirIdx], newCol = curCol + colDir[dirIdx];
                    
                    // if out of grid continue
                    if(!isValid(visited, newRow, newCol)) continue;

                    visited[newRow][newCol] = true;
                    q.push({newRow, newCol});
                }
            }
            len++;   // the maximum length possible for a theif to any cell in that grid
        }
        
        // step 2 : check for maximum safeness factor using Binary Search and simulatneously
        //  using BFS to check is its possible to traverse from (0, 0) to (n - 1, n - 1)
        int low = 0, high = len;
        int maxSF = 0;
        while(low <= high){
            int mid = low + (high - low) / 2;

            if(isSafe(distToTheif, mid)){
                // update ans and low 
                maxSF = mid;
                low = mid + 1;
            }
            else{
                // update the high
                high = mid - 1;
            }
        }
        return maxSF;
    }
};

// TC : O(n^2logn) -> in step 2(n2 -> BFS * logn -> BS)
// SC : O(n^2)



// Method 2 -> Multisource BFS + Priority queue

class Solution {
public:
    vector<vector<int>> directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    int maximumSafenessFactor(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<vector<int>> dist(n, vector<int>(n, INT_MAX));
        queue<pair<int, int>> q;

        // Initialize all thief positions
        for (int r = 0; r < n; ++r) {
            for (int c = 0; c < n; ++c) {
                if (grid[r][c] == 1) {
                    q.push({r, c});
                    dist[r][c] = 0;
                }
            }
        }

        // Multi-source BFS to calculate minimum distance to any thief
        while (!q.empty()) {
            auto [r, c] = q.front();
            q.pop();
            for (auto& dir : directions) {
                int nr = r + dir[0], nc = c + dir[1];
                if (nr >= 0 && nr < n && nc >= 0 && nc < n && dist[nr][nc] == INT_MAX) {
                    dist[nr][nc] = dist[r][c] + 1;
                    q.push({nr, nc});
                }
            }
        }

        // Use priority queue to find path with maximum safeness factor
        priority_queue<pair<int, pair<int, int>>> pq;
        pq.push({dist[0][0], {0, 0}});
        vector<vector<int>> maxSafeness(n, vector<int>(n, -1));
        maxSafeness[0][0] = dist[0][0];

        while (!pq.empty()) {
            auto [d, pos] = pq.top();
            pq.pop();
            int r = pos.first, c = pos.second;
            if (r == n - 1 && c == n - 1) return d;  // Reached bottom-right corner

            for (auto& dir : directions) {
                int nr = r + dir[0], nc = c + dir[1];
                if (nr >= 0 && nr < n && nc >= 0 && nc < n) {
                    int newSafe = min(d, dist[nr][nc]);
                    if (newSafe > maxSafeness[nr][nc]) {
                        maxSafeness[nr][nc] = newSafe;
                        pq.push({newSafe, {nr, nc}});
                    }
                }
            }
        }

        return -1;  // In case there's no valid path
    }
};
