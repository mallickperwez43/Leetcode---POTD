/*   INTUTION
For every pathway we can have 2 ways to solve the problem first is to go with the      clockwise and second is to go with the anticlock wise
and find the minimum possible + 1 because we wanted to click the button too  
 
*/
class Solution {
private:
    int helper(string ring, string key, int curRing, int curKey, vector<vector<int>> &dp){
        int ringSize = ring.size();
        int keySize = key.size();

        // base case
        if(curKey >= keySize)
           return 0;
        
        if(dp[curRing][curKey] != -1) 
            return dp[curRing][curKey];
        
        int minSteps = INT_MAX;

        for(int i = 0; i < ringSize; i++){
            if(ring[i] == key[curKey]){                           
                        // min of clockwise and anticlockwise                            
                        // + 1 is for the button click
                        // next element of the key
                minSteps = min(minSteps, min(abs(i - curRing), ringSize - abs(i - curRing)) + 1 + helper(ring, key, i, curKey + 1, dp));
            }
        }
        return dp[curRing][curKey] = minSteps;
    }
public:
    int findRotateSteps(string ring, string key) {
        int n = ring.size();
        int m = key.size();

        // create a 2d dp
        vector<vector<int>> dp(n, vector<int>(m, -1));

        return helper(ring, key, 0, 0, dp);
    }
};

// TC : O(n^2 * m)
// SC : O(n * m)
