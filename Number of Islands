class Solution {
private:
    void dfs(vector<vector<char>>& grid, int i, int j){
        // base case -> out of bound or visited/water
        if(i < 0 or i >= grid.size() or j < 0 or j >= grid[0].size() or grid[i][j] == '0')
            return;

        grid[i][j] = '0'; // mark visited
        dfs(grid, i - 1, j); // up
        dfs(grid, i + 1, j); // down
        dfs(grid, i, j + 1); // left
        dfs(grid, i, j - 1); // right
    }
public:
    int numIslands(vector<vector<char>>& grid) {
        int rows = grid.size();
        int cols = grid[0].size();
        
        // base case -> empty grid or empty col
        if(grid.empty() or grid[0].empty())
            return 0;
        
        int noOfIslands = 0;  // initialize the count as zero
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                if(grid[i][j] == '1'){   // land found
                    noOfIslands++;     // increment count
                    dfs(grid, i, j);   // call dfs and check the range of the island
                } 
            }
        }

        return noOfIslands;
    }
};

TC : O(n * m)
SC :O(1)
