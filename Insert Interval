class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        // Initialize a vector to store the merged intervals
        vector<vector<int>> ans;
        
        // Iterate through existing intervals until the end or until we find an interval
        // whose end is greater than the start of the new interval
        int i = 0;
        while(i < intervals.size() and intervals[i][1] < newInterval[0]){
            ans.push_back(intervals[i]); // Add intervals that are completely before newInterval
            i++;
        }
        
        // Merge intervals that overlap with newInterval
        while(i < intervals.size() and intervals[i][0] <= newInterval[1]){
            newInterval[0] = min(intervals[i][0], newInterval[0]); // Update the start of the merged interval
            newInterval[1] = max(intervals[i][1], newInterval[1]); // Update the end of the merged interval
            i++;
        }
        
        // Add the merged interval
        ans.push_back(newInterval);
        
        // Add the remaining intervals that come after the merged interval
        while(i < intervals.size()){
            ans.push_back(intervals[i]);
            i++;
        }

        return ans;  // Return the merged intervals
    }
};
