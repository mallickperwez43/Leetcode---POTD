class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        int n = nums.size(), prefixSum = 0;
        
        // step 1 : store only the first occurance 
        unordered_map<int, int> firstOcc; // sum to index mapping
        firstOcc[0] = 0;

        // iterate the nums array and update the prefixSum with mod k along
        for(int i = 0; i < n; i++){
            prefixSum = (prefixSum + nums[i]) % k;
            // if prefix sum already exist then check for len >= 2
            if(firstOcc.find(prefixSum) != firstOcc.end()){
                if(i + 1 - firstOcc[prefixSum] >= 2) return true;
            }
            else{
                // add to first occ
                firstOcc[prefixSum] = i + 1;
            }
        } 

        return false;
    }
};
// TC : O(n)
// SC : O(n)
