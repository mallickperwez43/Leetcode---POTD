// classical
class Solution {
public:
    int minOperations(vector<int>& nums) {
        unordered_map<int,int> ump;

        for(auto i : nums){
            ump[i]++;
        }

        int ans = 0;

        for(auto i : ump){
            if(i.second==1) return -1;
            else if(i.second==2 or i.second==3) ans++;
            else if(i.second>3){
                int count=0;
                int rem=0;
                count=i.second/3;
                rem=i.second%3;
                ans+=count;
                if(rem!=0) ans++;
            }
        }
        return ans;
    }
};

//discriptive
class Solution {
public:
    int minOperations(vector<int>& nums) {
        int ans = 0;

        unordered_map<int,int> f;

        for(auto i : nums)
            f[i]++;
        
        for(auto i : f){
            if(i.second % 3 == 0){
                ans += i.second / 3;
            }
            else if(i.second % 3 == 2){
                ans++;
                ans += (i.second - 2) / 3;
            }
            else{
                if(i.second == 1)
                    return -1;
                
                ans += 2;
                ans += (i.second - 4) / 3;
            }  
        }

        return ans;
    }
};
