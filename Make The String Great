// method 1 -> stack

class Solution {
public:
    string makeGood(string s) {
        stack<char> st; // Initialize a stack to store characters

        // Iterate through each character in the input string
        for(char ch : s){
            // If the stack is not empty and the current character and the top of the stack form a pair to be removed
            if(!st.empty() and abs(ch - st.top()) == 32){
                st.pop(); // Remove the top character from the stack
            }
            else{
                st.push(ch); // Otherwise, push the current character onto the stack
            }
        }

        string ans = ""; // Initialize an empty string to store the final answer

        // Reconstruct the answer string by popping characters from the stack
        while(!st.empty()){
            ans = st.top() + ans; // Append the top character of the stack to the beginning of the answer string
            st.pop(); // Remove the top character from the stack
        }
        return ans; // Return the final answer string
    }
};

// method 2 -> variables and ans string

class Solution {
public:
    string makeGood(string s) {
        string result = ""; // Initialize an empty string to store the result

        // Iterate through each character in the input string
        for (char curr : s) {
            char peek = (result.length() > 0) ? result[result.length() - 1] : '1'; // Get the last character of the result string if it exists, otherwise assign '1'

            // Check if the current character and the last character of the result string form a pair that needs to be removed
            if (abs(peek - curr) == 32 && result.length() > 0) {
                result.pop_back(); // If they form a pair, remove the last character from the result string
            } else {
                result += curr; // Otherwise, append the current character to the result string
            }
        }
        return result; // Return the resulting string after all characters have been processed
    }
};


// tc and sc for both
TC : O(n)
SC : O(n)
