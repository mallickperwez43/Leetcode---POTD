class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();

        vector<int> dp(n, 1e5);

        for(int i = 0; i < n; i++){
            int p = lower_bound(dp.begin(), dp.end(), nums[i]) - dp.begin();

            if(p < n)
                dp[p] = min(dp[p], nums[i]);
        }

        for(int i = n - 1; i > -1; i--){
            if(dp[i] < 1e5)
                return i + 1;
        }

        return 0;
    }
};

//to understand see the bottom one

// TC = O(N * log N) - N binary searches of O(log N) each
// SC = O(N)

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        vector<int> temp;
        temp.push_back(nums[0]);
        int l = 1; // len = 1 as we pushed nums[0]
        // LOGIC : Create a temp array that adds elements if greater than the last element, and if not, overwrites smallest greater element. NOTE : temp does not store the longest increasing subsequence, we are just utilizing the length of temp to get our answer.
        for(int i=1;i<nums.size();i++){
            if(temp.back() < nums[i]){ // If nums[i] is greater, just add it at the back
                temp.push_back(nums[i]);
                l++;
            }
            else{ // If not, just replace the smallest element greater than nums[i] with nums[i]
                int ind = lower_bound(temp.begin(),temp.end(),nums[i]) - temp.begin(); // inbuilt c++ function to perform binary search O(log N) to search for the third parameter in the array or element just greater than it. Do - temp.begin() to get an integer index value
                temp[ind] = nums[i];
            }
        }
        return l;
    }
};

//Code Studio Striver way

#include<bits/stdc++.h>

int longestIncreasingSubsequence(int arr[], int n)
{
    // Write Your Code here
    vector<int>ans;

    ans.push_back(arr[0]);

  

    for(int i=1;i<n;i++){

        if(ans.back() < arr[i]){

            ans.push_back(arr[i]);

        }

        else{

            int index = lower_bound(ans.begin(),ans.end(),arr[i])-ans.begin();

            ans[index] = arr[i];

        }

    }

        

    return ans.size();
}
